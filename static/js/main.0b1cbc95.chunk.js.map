{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["About","className","Movie","id","year","title","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Detail","props","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"yRAeeA,MAZf,WACE,OACE,sBAAKC,UAAU,mBAAf,UACE,gJAIA,kE,gFCyCSC,MA3Cf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,UAAD,OAAYP,GACpBQ,MAAO,CACLP,OACAC,QACAC,UACAC,SACAC,WARN,SAYE,sBAAKP,UAAU,QAAf,UACE,qBAAKW,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,sBAAKJ,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BI,IAC9B,oBAAIJ,UAAU,cAAd,SAA6BG,IAC7B,oBAAIH,UAAU,gBAAd,SACGO,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBf,UAAU,gBAA1B,SACGc,GADMC,QAKb,oBAAGf,UAAU,iBAAb,UAA+BK,EAAQW,MAAM,EAAG,KAAhD,kBCsBKC,G,kNAlDbP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,uDAWZ,WACEQ,KAAKN,c,oBAGP,WACE,MAA8BM,KAAKhB,MAA3BQ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACE,yBAASnB,UAAU,YAAnB,SACGkB,EACC,qBAAKlB,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGmB,EAAON,KAAI,SAACc,GACX,OACE,cAAC,EAAD,CAEEzB,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,QANToB,EAAMzB,e,GAlCV2B,IAAMC,YCeVC,E,uKAhBb,WACE,MAA8BL,KAAKM,MAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aACKC,IAAnBF,EAASvB,OAEXwB,EAAQE,KAAK,O,oBAGjB,WACE,IAAQH,EAAaP,KAAKM,MAAlBC,SACR,OAAIA,EAASvB,MACJ,+BAAOuB,EAASvB,MAAMN,QAEtB,S,GAbQyB,IAAMC,W,MCYZO,MATf,WACE,OACE,sBAAKrC,UAAU,MAAf,UACE,cAAC,IAAD,CAAMQ,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uB,MCeS8B,MAdf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IAEA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWxB,IAExC,cAAC,IAAD,CAAOsB,KAAK,SAASE,UAAW1C,IAChC,cAAC,IAAD,CAAOwC,KAAK,aAAaE,UAAWV,QCf1CW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0b1cbc95.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./About.css\";\n\nfunction About() {\n  return (\n    <div className=\"about__container\">\n      <span>\n        “Freedom is the freedom to say that two plus two make four. If that is\n        granted, all else follows.”\n      </span>\n      <span>− George Orwell, 1984</span>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport \"./Movie.css\";\n\n//to에 여러가지 props 내용물이 담겨있는데 그 중 pathname, state를 사용\n// ``(백틱)은 문자열과 변수를 한꺼번에 표현\n\nfunction Movie({ id, year, title, summary, poster, genres }) {\n  return (\n    <Link\n      to={{\n        pathname: `/movie/${id}`,\n        state: {\n          year,\n          title,\n          summary,\n          poster,\n          genres,\n        },\n      }}\n    >\n      <div className=\"movie\">\n        <img src={poster} alt={title} title={title} />\n        <div className=\"movie__data\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"movie__genres\">\n            {genres.map((genre, index) => (\n              <li key={index} className=\"genres__genre\">\n                {genre}\n              </li>\n            ))}\n          </ul>\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n          {/* slice는 0번째부터 180번째까지 글자 내용을 표출한다 */}\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired, // isRequired가 있으면 props 내용물이 빠지면 안되고, 없으면 있어도 되고 없어도 된다\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n}; // propTypes는 전송된 props 중에 제대로 타입이 왔는지 빠진것은 없는지 확인하기 위한 것이다.\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }, // ES6 방식\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    ); // 주소로 부터 데이터 받아오기\n    this.setState({ movies, isLoading: false });\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  } // 렌더링 끝나고 호출\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => {\n              return (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                ></Movie>\n              );\n            })}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\n//console.log(props); 이용하여 location 부분을 보면 전송된 것을 볼수 있다.\n//react-router로 전송된 컴포넌트에 props가 있는데 그 history가 있다.\nclass Detail extends React.Component {\n  componentDidMount() {\n    const { location, history } = this.props;\n    if (location.state === undefined) {\n      //링크 클릭이 아닌 주소로 movie-detail로 들어오면 props가 없어 undefined로 정의 되어 history 안의 push를 이용한다\n      history.push(\"/\");\n    }\n  }\n  render() {\n    const { location } = this.props;\n    if (location.state) {\n      return <span>{location.state.title}</span>;\n    } else {\n      return null;\n    }\n  }\n}\nexport default Detail;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\n//Link를 사용하면 to에서 주소(ex:/about)를 확인하고 상위 컴포넌트(BrowserRouter)에서 Route로 지정된 주소로 이동한다.\n\nfunction Navigation() {\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\n// react-router로 전송된 컴포넌트는 props를 가지고 있다.\n// github에 홈페이지 전시할 때는 BrowserRouter 사용하면 까다롭기 때문에 HashRouter(주소에 #이 추가됨)로 변경하여 사용한다\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navigation />\n      {/* Link를 사용하는 Navigation은 반드시 BrowserRouter안에 있어야한다 */}\n      <Route path=\"/\" exact={true} component={Home} />\n      {/* exact를 사용해야 주소 '/'를 단독으로 사용할 수 있다.*/}\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n      {/* movie/:id 에서 ':'은 변수를 의미한다. */}\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}